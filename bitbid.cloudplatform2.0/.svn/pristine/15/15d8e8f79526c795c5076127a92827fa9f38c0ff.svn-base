<template>
  <div class="cloudcontent" id="cloud_processtype">
    <!--搜索 & 添加按钮-->
    <div class="topmain">
      <el-row>
        <div class="seacher_box">
          <span>标题：</span>
          <el-input class="input" style="vertical-align: top"  placeholder="请输入关键字" v-model="search_input"></el-input>
          <span>发布时间：</span>
          <el-date-picker
            v-model="publishTime"
            type="daterange"
            range-separator="--"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            value-format="yyyy-MM-dd">
          </el-date-picker>
          <el-button  class="search" icon="el-icon-search" @click="search"></el-button>
          <el-button  class="cancal" @click="reset">重置</el-button>
        </div>
      </el-row>
    </div>
    <!--搜索 & 添加按钮-->
    <div class="main">
      <el-button class="addbutton" v-if="type === 'notice' || type === 'news'" @click="handleAdd">
        <span>+ 新增</span>
      </el-button>
      <el-button class="addbutton" v-if="type === 'homeNotice'" @click="handleMultiDel">
        <span>批量删除</span>
      </el-button>
      <el-button class="addbutton" v-if="type === 'homeNotice'" @click="handleReaded">
        <span>标记为已读</span>
      </el-button>
      <el-table
        :data="tableData"
        border
        header-cell-class-name="tableheader"
        @selection-change="handleSelectionChange">
        <el-table-column
          v-if="type !== 'homeNotice'"
          :key="Math.random()"
          type="index"
          label="序号"
          align="center"
          :index="indexMethod"
          width="80">
        </el-table-column>
        <el-table-column
          v-if="type === 'homeNotice'"
          :key="Math.random()"
          type="selection"
          align="center"
          width="80">
        </el-table-column>
        <el-table-column
          :key="Math.random()"
          prop="title"
          :label="type === 'notice' || type === 'homeNotice'  ? '通知标题' : '标题'"
          show-overflow-tooltip>
          <template slot-scope="scope">
            <span :class="handleTitleStyle(scope.row)">{{scope.row.title}}</span>
          </template>
        </el-table-column>
        <el-table-column
          :key="Math.random()"
          prop="status"
          label="状态"
          width="120">
          <template slot-scope="scope">
            <span  v-if="scope.row.status === 0">已保存</span>
            <span  v-if="scope.row.status === 1">已提交</span>
          </template>
        </el-table-column>
        <el-table-column
          v-if="type === 'notice' || type === 'news'"
          :key="Math.random()"
          prop="createName"
          label="提交人"
          width="140"
          show-overflow-tooltip>
        </el-table-column>
        <el-table-column
          v-if="type === 'notice' || type === 'news'"
          :key="Math.random()"
          prop="submitTime"
          label="提交时间"
          width="180"
          value-format="yyyy-MM-dd">
        </el-table-column>
        <el-table-column
          v-if="type === 'homeNotice' || type === 'homeNews'"
          :key="Math.random()"
          prop="publishName"
          label="发布人"
          width="140"
          show-overflow-tooltip>
        </el-table-column>
        <el-table-column
          v-if="type === 'homeNotice' || type === 'homeNews'"
          :key="Math.random()"
          prop="publishDate"
          label="发布时间"
          width="180">
        </el-table-column>
        <el-table-column
          label="操作" align="center" width="200">
          <template slot-scope="scope">
            <el-button type="text" size="small" @click="handleDetail(scope)">查看</el-button>
            <template v-if="type === 'notice' || type === 'news'">
              <el-button type="text" size="small" @click="handleEdit(scope)">编辑</el-button>
              <el-button type="text" size="small" @click="handleDel(scope)">删除</el-button>
            </template>
          </template>
        </el-table-column>
      </el-table>
      <!--分页-->
      <el-pagination
        background
        layout="prev, pager, next"
        :total="total"
        :page-size='pageSize'
        :current-page.sync="currentPage"
        @current-change="handleCurrentChange">
      </el-pagination>
      <!--分页-->
    </div>
  </div>
</template>

<script>
import {notice} from '@/api/notice/notice'

export default {
  name: '',
  data () {
    return {
      search_input: '',
      publishTime: '',
      type: '',
      // 当前页
      currentPage: 1,
      pageNo: 0,
      total: 0, // 总条数
      pageSize: 10, // 每页展示条数
      tableData: []
    }
  },
  methods: {
    indexMethod (index) {
      return index + (this.currentPage - 1) * 10 + 1
    },
    // 重置
    reset () {
      this.search_input = ''
      this.publishTime = []
    },
    // 搜索
    search () {
      this.pageNo = 0
      this.currentPage = 1
      this.getData()
    },
    // 多选
    handleSelectionChange (val) {
    },
    // 批量删除
    handleMultiDel () {},
    // 标记已读
    handleReaded () {},
    // 处理标题样式
    handleTitleStyle (row) {
      if (this.type === 'homeNotice') {
        return row.isReaded ? 'readed' : 'unReaded'
      } else {
        return ''
      }
    },
    getData () {
      let query = {
        pageNo: this.pageNo,
        pageSize: this.pageSize,
        messageLike: this.search_input,
        enterpriseId: this.$store.getters.authUser.enterpriseId
      }
      if (this.publishTime) {
        this.$set(query, 'searchStartTime', this.publishTime[0] + '00:00:00')
        this.$set(query, 'searchEndTime', this.publishTime[1] + '23:59:59')
      }
      if (this.type === 'notice') {
        this.$set(query, 'type', 1)
      } else if (this.type === 'news') {
        this.$set(query, 'type', 2)
      }
      notice.getNoticeList(query).then((res) => {
        if (res.data.resCode === '0000') {
          this.tableData = res.data.noticeList.list
          this.total = res.data.noticeList.total
        }
      })
    },
    // 表单分页
    handleCurrentChange (nowNum) {
      this.currentPage = nowNum
      this.pageNo = (nowNum - 1) * this.pageSize
      this.getData(parseInt(this.pageNo), parseInt(this.pageSize))
    },
    handleDel (scope) {
      this.$confirm('确认删除吗?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'error'
      }).then(() => {
        notice.deleteNotice(scope.row.objectId).then((res) => {
          if (res.data.resCode === '0000') {
            this.getData()
          }
        })
      }).catch(() => {
        return false
      })
    },
    handleAdd () {
      let path = ''
      switch (this.type) {
        case 'notice':
          path = '/dailyManagement/noticeAnnouncement/add'
          break
        case 'news':
          path = '/dailyManagement/companyNews/add'
          break
      }
      this.$router.push({path: path})
    },
    handleDetail (scope) {
      let path = ''
      switch (this.type) {
        case 'notice':
          path = '/dailyManagement/noticeAnnouncement/detail/'
          break
        case 'news':
          path = '/dailyManagement/companyNews/detail/'
          break
      }
      path += scope.row.objectId
      this.$router.push({path: path})
    },
    handleEdit (scope) {
      let path = ''
      switch (this.type) {
        case 'notice':
          path = '/dailyManagement/noticeAnnouncement/update/'
          break
        case 'news':
          path = '/dailyManagement/companyNews/update/'
          break
      }
      path += scope.row.objectId
      this.$router.push({path: path})
    },
    init () {
      this.type = this.$route.meta.type
      this.getData()
    }
  },
  watch: {
    '$route': 'init'
  },
  mounted () {
    this.init()
  }
}
</script>

<style scoped>
  .addbutton{
    margin-bottom: 12px;
    color: #fff;
    background-color: #409EFF;
    border-color: #409EFF;
    float: right;
    margin-left: 12px;
  }
  .input{
    width: 200px;
    margin-right: 24px;
  }
  .readed::before{
    display: inline-block;
    content: '';
    width: 6px;
    height: 6px;
    margin-right: 6px;
    border-radius: 50%;
    background-color: #ff0001;
    text-align: center;
  }
  .readed{
    color: #333;
  }
  .unReaded{
    color: #999;
  }
  .unReaded::before{
    display: inline-block;
    content: '';
    width: 6px;
    height: 6px;
    margin-right: 6px;
    border-radius: 50%;
    background-color: #bbb;
  }
  .title{
    vertical-align: middle;
  }
</style>
