<template>
  <div class="cloudcontent" id="cloud_processedit">
    <div class="main">
      <el-form :model="updateForm" :rules="rules" ref="updateForm" :validate-on-rule-change="true">
        <el-row>
          <el-col :span="12">
            <el-form-item label="项目编号：">
              <el-input v-model="bidSection.tenderProjectCode" disabled></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="项目名称：">
              <el-input v-model="bidSection.tenderProjectName" disabled></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="标段编号：">
              <el-input v-model="bidSection.bidSectionCode" disabled></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="标段名称：">
              <el-input v-model="bidSection.bidSectionName" disabled></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="开标时间：" prop="bidOpeningTime">
              <el-date-picker
                v-model="updateForm.bidOpeningTime"
                type="datetime"
                value-format="yyyy-MM-dd HH:mm:ss">
              </el-date-picker>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="开标地点："  prop="bidOpeningAddress">
              <el-input v-model="updateForm.bidOpeningAddress" clearable></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="24" class="ueditor_box">
            <el-form-item label="开标记录内容：">
              <editor ref="ueditorContent" class="ueditor" :editread="editread"></editor>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="24">
            <el-form-item label="开标参与者：">
              <el-button class="addbtn" @click="handleAdd">+ 新增</el-button>
              <span class="bitian participant-title">采购人:</span>
              <el-table
                :data="updateForm.purchaserList"
                border
                style="width: 100%" header-cell-class-name="tableheader">
                <el-table-column
                  prop="unitName"
                  label="单位名称"
                  show-overflow-tooltip>
                </el-table-column>
                <el-table-column
                  prop="participantName"
                  label="姓名">
                </el-table-column>
                <el-table-column
                  label="操作" align="center" width="260">
                  <template slot-scope="scope">
                    <el-button type="text" size="small" @click="handleEdit(scope, 1)">编辑</el-button>
                    <el-button type="text" size="small" @click="handleDel(updateForm.purchaserList, scope.$index)">删除</el-button>
                  </template>
                </el-table-column>
              </el-table>
              <span class="bitian participant-title">投标人代表:</span>
              <el-table
                :data="updateForm.bidderList"
                border
                style="width: 100%" header-cell-class-name="tableheader">
                <el-table-column
                  prop="unitName"
                  label="单位名称"
                  show-overflow-tooltip>
                </el-table-column>
                <el-table-column
                  prop="participantName"
                  label="姓名">
                </el-table-column>
                <el-table-column
                  label="操作" align="center" width="260">
                  <template slot-scope="scope">
                    <el-button type="text" size="small" @click="handleEdit(scope, 2)">编辑</el-button>
                    <el-button type="text" size="small" @click="handleDel(updateForm.bidderList, scope.$index)">删除</el-button>
                  </template>
                </el-table-column>
              </el-table>
              <span class="bitian participant-title">代理机构:</span>
              <el-table
                :data="updateForm.agencyList"
                border
                style="width: 100%" header-cell-class-name="tableheader">
                <el-table-column
                  prop="unitName"
                  label="单位名称"
                  show-overflow-tooltip>
                </el-table-column>
                <el-table-column
                  prop="participantName"
                  label="姓名">
                </el-table-column>
                <el-table-column
                  label="操作" align="center" width="260">
                  <template slot-scope="scope">
                    <el-button type="text" size="small" @click="handleEdit(scope, 3)">编辑</el-button>
                    <el-button type="text" size="small" @click="handleDel(updateForm.agencyList, scope.$index)">删除</el-button>
                  </template>
                </el-table-column>
              </el-table>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="24">
            <el-form-item label="开标记录-附件：" class="bitianicon">
              <upload-file @uploadSuccess="uploadOtherSuccess" @deleteSuccess="deleteSuccess"
                           :fileArrays="updateForm.fileInformationList"
                           fileType="9"
                           isImage="0">
              </upload-file>
            </el-form-item>
          </el-col>
        </el-row>
        <el-form-item class="submit-radio">
          <el-button type="primary" @click="submit('updateForm', 0)" :loading="isSaving">保存</el-button>
          <el-button type="primary" class="submitBtn" @click="submit('updateForm', 1)" :loading="isSubmiting">提交</el-button>
          <el-button class="cancal" @click="close">取消</el-button>
        </el-form-item>
      </el-form>
      <submitApproveDialog :flowStatus="flowStatus" :tenderSystemCode="updateForm.tenderSystemCode" ref="approvalDialog" :showVisible="approveDialogVisable" @confirmSubmit="confirmSubmit" @handleCancel="cancelApprove"></submitApproveDialog>
      <el-dialog
        :title="isEdit ? '编辑' : '新增'"
        :before-close="handleCancel"
        :visible.sync="participantVisible"
        width="30%">
        <el-form :model="dialogForm" :rules="dialogRules" ref="dialogForm" label-width="140px">
          <el-form-item v-if="!isEdit" label="参与者类型：" prop="participantType">
            <el-select v-model="dialogForm.participantType" placeholder="请选择" @change="changeType">
              <el-option
                v-for="item in options"
                :key="item.value"
                :label="item.label"
                :value="item.value">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item v-if="isEdit" label="参与者类型：" prop="participantType">
            <el-select v-model="dialogForm.participantType" placeholder="请选择" disabled>
              <el-option
                v-for="item in options"
                :key="item.value"
                :label="item.label"
                :value="item.value">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item v-if="dialogForm.participantType === 1 || dialogForm.participantType === 3 || isEdit" label="单位名称：" prop="unitName">
            <el-input v-model="dialogForm.unitName" readonly></el-input>
          </el-form-item>
          <el-form-item v-else label="单位名称：" prop="unitName">
            <el-input v-model="dialogForm.unitName" readonly>
              <el-button type="primary" slot="append" size="mini" @click="btnChoose">选择</el-button>
            </el-input>
          </el-form-item>
          <el-form-item label="姓名：" prop="participantName">
            <el-input v-model="dialogForm.participantName" placeholder="请输入姓名"></el-input>
          </el-form-item>
        </el-form>
        <div class="submit-radio">
          <el-button @click="handleCancel">取 消</el-button>
          <el-button type="primary" @click="handleConfirm">确 定</el-button>
        </div>
      </el-dialog>
      <bidder-dialog v-if="!tradingPlatformFlag" :tenderSystemCode="updateForm.tenderSystemCode" :flowStatus="flowStatus" :includeNames="includeNames" :showVisible="showBidderVisible" @selected="selectedBidder" @showDialog="showBidderDialog"></bidder-dialog>
      <section-bidder-dialog v-if="tradingPlatformFlag" :tenderSystemCode="$route.query.tenderSystemCode" :excludeNames="excludeBidderNames" :includeNames="includeBidderNames"
                             :flowStatus="flowStatus" :showVisible="showBidderVisible" @selected="selectedBidder" @showDialog="showBidderDialog" :sectionSystemCode="$route.query.sectionSystemCode"></section-bidder-dialog>
    </div>
  </div>
</template>
<script>
import editor from '@/components/ueditor/ueditor.vue'
import uploadFile from '@/components/upload/publicFileUpload'
import {documentInfo, tenderProject, resultInfo} from '@/api/project'
import submitApproveDialog from '@/pages/project/commonCompents/submitApproveDialog'
import bidderDialog from '@/pages/project/projectProcess/common/bidder_dialog.vue'
import sectionBidderDialog from '@/pages/project/projectProcess/common/section_bidder_dialog.vue'
export default {
  components: {
    editor,
    uploadFile,
    bidderDialog,
    sectionBidderDialog,
    submitApproveDialog
  },
  data () {
    return {
      flowStatus: 13,
      updateForm: {
        bidOpeningTime: null,
        bidOpeningAddress: '',
        fileInformationList: [],
        purchaserList: [],
        bidderList: [],
        agencyList: []
      },
      rules: {
        bidOpeningAddress: {required: true, message: '请填写开标地点', trigger: 'blur'},
        bidOpeningTime: {required: true, message: '请选择开标时间', trigger: 'change'}
      },
      // 富文本
      editread: false,
      isSaving: false,
      isSubmiting: false,
      bidSection: {},
      approveDialogVisable: false,
      participantVisible: false,
      isEdit: false,
      dialogForm: {
        participantType: null,
        unitName: '',
        participantName: ''
      },
      dialogRules: {
        participantType: {required: true, message: '请选择参与者类型', trigger: ['blur', 'change']},
        unitName: {required: true, message: '请选择单位名称', trigger: ['blur']},
        participantName: {required: true, message: '请输入姓名', trigger: ['blur', 'change']}
      },
      options: [
        {
          value: 1,
          label: '采购人'
        },
        {
          value: 2,
          label: '投标人代表'
        },
        {
          value: 3,
          label: '代理机构'
        }
      ],
      showBidderVisible: false,
      tendererName: '', // 招标人名称
      index: null,
      includeBidderNames: [],
      includeNames: [],
      tradingPlatformFlag: this.$store.getters.authUser.tradingPlatformFlag
    }
  },
  methods: {
    changeType () {
      if (this.dialogForm.participantType === 1) {
        this.$set(this.dialogForm, 'unitName', this.tendererName)
      } else if (this.dialogForm.participantType === 2) {
        this.$set(this.dialogForm, 'unitName', '')
        this.includeNames = this.includeBidderNames
      } else if (this.dialogForm.participantType === 3) {
        this.$set(this.dialogForm, 'unitName', this.$store.getters.authUser.enterpriseName)
        this.includeNames = []
      }
    },
    // 上传附件
    uploadOtherSuccess (file) {
      this.updateForm.fileInformationList.push(file)
    },
    deleteSuccess (fileId) {
      this.updateForm.fileInformationList = this.updateForm.fileInformationList.filter(item => item.relativePath !== fileId)
    },
    // 提交/保存
    submit (form, status) {
      if (this.updateForm.fileInformationList.length < 1) {
        this.$message({
          message: '请上传开标记录-附件！',
          type: 'warning'
        })
        return
      }
      if (this.updateForm.purchaserList.length < 1) {
        this.$message({
          message: '请填写采购人！',
          type: 'warning'
        })
        return
      }
      if (this.updateForm.bidderList.length < 1) {
        this.$message({
          message: '请填写投标人代表！',
          type: 'warning'
        })
        return
      }
      if (this.updateForm.agencyList.length < 1) {
        this.$message({
          message: '请填写代理机构！',
          type: 'warning'
        })
        return
      }
      this.$refs[form].validate((vaild) => {
        if (vaild) {
          if (Object.is(status, 0)) {
            this.approveDialogVisable = false
            this.submitData(status)
          } else {
            this.approveDialogVisable = true
          }
        } else {
          return false
        }
      })
    },
    submitData (status) {
      let msg = Object.is(status, 1) ? '提交后数据将锁定，不允许修改，确认要提交吗?' : '确定要保存吗?'
      this.$confirm(msg, '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
        beforeClose: (action, instance, done) => {
          done()
        }
      }).then(() => {
        if (Object.is(status, 0)) {
          this.isSaving = true
        } else if (Object.is(status, 1)) {
          this.cancelApprove()
          this.isSubmiting = true
          this.updateForm.auditStatus = 4
          this.updateForm.submitTime = new Date().getTime()
        }
        this.updateForm.content = this.$refs.ueditorContent.getContent()
        this.updateForm.fileInformationList.map(item => {
          item.objectId = null
        })
        this.updateForm.bidOpeningParticipantList = []
        this.updateForm.purchaserList.map(item => {
          this.updateForm.bidOpeningParticipantList.push(item)
        })
        this.updateForm.bidderList.map(item => {
          this.updateForm.bidOpeningParticipantList.push(item)
        })
        this.updateForm.agencyList.map(item => {
          this.updateForm.bidOpeningParticipantList.push(item)
        })
        documentInfo.update(this.updateForm).then((res) => {
          this.isSaving = false
          this.isSubmiting = false
          if (res.data.resCode === '0000') {
            this.close()
          }
        })
      }).catch(() => {
        this.isSaving = false
        this.isSubmiting = false
        return false
      })
    },
    // 确认提交
    confirmSubmit (record) {
      this.updateForm.approvalFlowExecutorList = []
      this.updateForm.manualAdditionList = []
      for (let i = 0; i < record.approveList.length; i++) {
        let obj = {
          usersId: record.approveList[i].objectId,
          flowLevel: i + 1
        }
        this.updateForm.approvalFlowExecutorList.push(obj)
      }
      if (record.noticeList && record.noticeList.length > 0) {
        this.updateForm.manualAdditionList = record.noticeList
      }
      this.submitData(1)
    },
    cancelApprove () {
      this.approveDialogVisable = false
    },
    // 取消
    close () {
      this.$store.commit('delete_tabs', this.$route.fullPath)
      this.$router.go(-1)
    },
    getDocumentInfo () {
      documentInfo.getById(this.$route.query.objectId).then(res => {
        this.updateForm = res.data.documentInfo
        if (this.updateForm.bidSection) {
          this.bidSection = this.updateForm.bidSection
        }
        this.updateForm.purchaserList = []
        this.updateForm.bidderList = []
        this.updateForm.agencyList = []
        this.updateForm.bidOpeningParticipantList.map(item => {
          if (Number(item.participantType) === 1) {
            this.updateForm.purchaserList.push(item)
          } else if (Number(item.participantType) === 2) {
            this.updateForm.bidderList.push(item)
          } else if (Number(item.participantType) === 3) {
            this.updateForm.agencyList.push(item)
          }
        })
        this.$refs.ueditorContent.setContent(this.updateForm.content)
        this.getTenderProjecct()
        this.getFileInfoList()
      })
    },
    handleAdd () {
      this.isEdit = false
      this.participantVisible = true
    },
    handleEdit (scope, type) {
      this.dialogForm = Object.assign({}, scope.row)
      this.index = scope.$index
      this.participantVisible = true
      this.isEdit = true
    },
    handleDel (list, index) {
      list.splice(index, 1)
    },
    handleCancel () {
      this.participantVisible = false
      this.dialogForm = {}
      this.$refs['dialogForm'].resetFields()
    },
    // 选择投标人
    btnChoose () {
      this.showBidderVisible = true
    },
    // 选择投标人弹窗 打开/关闭
    showBidderDialog () {
      this.showBidderVisible = !this.showBidderVisible
    },
    // 已选择投标人信息
    selectedBidder (obj) {
      this.dialogForm.unitName = obj.name
      this.dialogForm.bidderId = obj.objectId
    },
    handleConfirm () {
      this.$refs['dialogForm'].validate((vaild) => {
        if (vaild) {
          if (this.isEdit) {
            switch (this.dialogForm.participantType) {
              case 1:
                this.updateForm.purchaserList.splice(this.index, 1, {
                  participantType: this.dialogForm.participantType,
                  unitName: this.dialogForm.unitName,
                  participantName: this.dialogForm.participantName
                })
                break
              case 2:
                this.updateForm.bidderList.splice(this.index, 1, {
                  participantType: this.dialogForm.participantType,
                  unitName: this.dialogForm.unitName,
                  bidderId: this.dialogForm.bidderId,
                  participantName: this.dialogForm.participantName
                })
                break
              case 3:
                this.updateForm.agencyList.splice(this.index, 1, {
                  participantType: this.dialogForm.participantType,
                  unitName: this.dialogForm.unitName,
                  participantName: this.dialogForm.participantName
                })
                break
            }
          } else {
            switch (this.dialogForm.participantType) {
              case 1:
                this.updateForm.purchaserList.push({
                  participantType: this.dialogForm.participantType,
                  unitName: this.dialogForm.unitName,
                  participantName: this.dialogForm.participantName
                })
                break
              case 2:
                this.updateForm.bidderList.push({
                  participantType: this.dialogForm.participantType,
                  unitName: this.dialogForm.unitName,
                  bidderId: this.dialogForm.bidderId,
                  participantName: this.dialogForm.participantName
                })
                break
              case 3:
                this.updateForm.agencyList.push({
                  participantType: this.dialogForm.participantType,
                  unitName: this.dialogForm.unitName,
                  participantName: this.dialogForm.participantName
                })
                break
            }
          }
          this.handleCancel()
        } else {
          return false
        }
      })
    },
    getTenderProjecct () {
      tenderProject.getBaseByCode(this.updateForm.tenderSystemCode).then(res => {
        let tenderProject = res.data.tenderProject
        this.tendererName = tenderProject.tendererName
      })
    },
    getFileInfoList () {
      let query = {
        tenderSystemCode: this.updateForm.tenderSystemCode,
        sectionSystemCode: this.updateForm.sectionSystemCode,
        // enterpriseId: this.$store.getters.authUser.enterpriseId,
        type: 2
      }
      resultInfo.getList(query).then(res => {
        let data = res.data.resultInfoList
        if (data) {
          data.map(item => {
            this.includeBidderNames.push(item.bidderName)
          })
        }
      })
    },
    init () {
      this.getDocumentInfo()
    }
  },
  watch: {
    '$route': 'getDocumentInfo'
  },
  mounted () {
    this.getDocumentInfo()
  }
}
</script>
<style lang="less">
  .participant-title {
    display: block;
    margin: 12px 0;
  }
</style>
