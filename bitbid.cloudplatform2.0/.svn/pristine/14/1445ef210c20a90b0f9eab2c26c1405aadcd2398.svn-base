<template>
  <el-dialog :title="titleName" width="600px" :before-close="cancel" :visible.sync="showVisible">
    <el-form :model="userForm" :rules="rules" ref="userForm" v-loading="loading">
      <el-form-item label="用户名(手机号码)：" prop="account" :label-width="formLabelWidth" :unselectable="isEdit">
        <el-input v-model.trim="userForm.account" auto-complete="off" :clearable="!isEdit" placeholder="请输入用户名(正确的11位手机号码)" :readonly="isEdit">
          <i class="el-icon-edit el-input__icon" v-if="!isEdit" slot="suffix"></i>
        </el-input>
      </el-form-item>
      <el-form-item label="姓名：" prop="name" :label-width="formLabelWidth">
        <el-input v-model.trim="userForm.name" auto-complete="off" clearable placeholder="请输入姓名">
          <i class="el-icon-edit el-input__icon" slot="suffix"></i>
        </el-input>
      </el-form-item>
      <el-form-item label="所属部门：" prop="departmentName" :label-width="formLabelWidth">
        <el-input class="deptInput" v-model="userForm.departmentName" auto-complete="off" placeholder="请选择所属部门" readonly="readonly" clearable @click.native="showDepartmentTree">
          <i slot="suffix" class="el-input__icon el-icon-arrow-down"></i>
        </el-input>
        <tree-options :initData="userForm.departmentId" @selectSuccess="selectedDepatment" :isShowOptions="isShowDptTree"></tree-options>
      </el-form-item>
    </el-form>
    <div slot="footer" class="dialog-footer operationbtn">
      <el-button type="info" @click="cancel">取 消</el-button>
      <el-button type="primary" @click="save">确 定</el-button>
    </div>
  </el-dialog>
</template>
<script>
import {user} from '@/api/system'
import {validateMobilePhone} from '../../../assets/js/validate'
import {trimStr} from '@/assets/js/common'
import TreeOptions from '../department/tree/tree_options'
export default {
  components: {
    TreeOptions
  },
  data () {
    // 验证账号重复
    let validAccount = (rule, value, callback) => {
      // 非编辑情况下可修改
      if (this.isEdit) {
        callback()
      } else {
        if (value && trimStr(value)) {
          const account = trimStr(value)
          if (!validateMobilePhone(account)) {
            callback(new Error('请输入正确的11位手机号码'))
          } else {
            user.isNoRepeated({account}).then(res => {
              if (!res.data.data) {
                callback(new Error('用户名重复，请重新填写'))
              } else {
                callback()
              }
            })
          }
        } else {
          callback(new Error('用户名不能为空'))
        }
      }
    }
    return {
      userForm: {
        enterpriseId: this.$store.getters.authUser.enterpriseId,
        type: 2
      },
      titleName: '新增用户',
      // 表单label长度
      formLabelWidth: '120px',
      // 是否展示部门树
      isShowDptTree: false,
      loading: false,
      // 新增用户提交验证
      rules: {
        account: [
          { required: true, message: '用户名不能为空', trigger: 'blur' },
          { validator: validAccount, trigger: 'blur' }
        ],
        name: [
          { required: true, message: '姓名不能为空', trigger: 'blur' },
          { min: 1, max: 20, message: '长度在1~20个字符', trigger: 'change' }
        ],
        departmentName: [
          { required: true, message: '所属部门不能为空', trigger: 'change' }
        ]
      }
    }
  },
  props: ['isEdit', 'editObjectId', 'showVisible'],
  watch: {
    showVisible (value) {
      if (value) {
        if (this.isEdit) {
          this.titleName = '编辑用户'
          this.queryOne()
        }
      } else {
        this.titleName = '新增用户'
        this.$refs['userForm'].resetFields()
        // 关闭部门树选择窗口
        this.isShowDptTree = false
      }
    }
  },
  methods: {
    queryOne () {
      this.loading = true
      user.queryOne(this.editObjectId).then(res => {
        this.loading = false
        this.userForm = res.data.data
        this.userForm.departmentName = this.userForm.department.name
      })
    },
    showDepartmentTree () {
      this.isShowDptTree = !this.isShowDptTree
    },
    selectedDepatment (deptTreeNode) {
      this.userForm.departmentName = deptTreeNode.label
      this.userForm.departmentId = deptTreeNode.id
      this.isShowDptTree = false
    },
    cancel () {
      this.userForm.objectId = null
      this.$emit('showEditDialog', false)
    },
    save () {
      this.$refs['userForm'].validate((valid) => {
        if (valid) {
          this.$confirm('确认要提交吗?', '提示', {
            confirmButtonText: '确认',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            this.loading = true
            // 将手机号码格式的账号保存为联系方式
            this.userForm.cellPhone = this.userForm.account
            user.update(this.userForm).then(res => {
              this.loading = false
              if (res.data.resCode === '0000') {
                this.cancel()
                this.$emit('saveSuccess')
              }
            }).catch(() => {
              this.loading = false
            })
          }).catch(() => {
            this.loading = false
            return false
          })
        } else {
          return false
        }
      })
    }
  }
}
</script>
<style>
  .deptInput {
    cursor: pointer;
  }
</style>
