<template>
  <div class="cloudcontent">
    <div class="main">
      <el-form :model="updateForm" :rules="rules" ref="updateForm" :validate-on-rule-change="true">
        <el-row>
          <el-col :span="12">
            <el-form-item label="项目编号：">
              <el-input v-model="bidSection.tenderProjectCode" disabled></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="项目名称：">
              <el-input v-model="bidSection.tenderProjectName" disabled></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="标段编号：">
              <el-input v-model="bidSection.bidSectionCode" disabled></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="标段名称：">
              <el-input v-model="bidSection.bidSectionName" disabled></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="专家姓名："  prop="expertName">
              <el-input v-model="updateForm.expertName" readonly>
                <el-button type="primary" slot="append" size="mini" @click="btnChoose">选择</el-button>
              </el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="身份证号码："  prop="idCard">
              <el-input v-model="updateForm.idCard" readonly></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="专业类别："  prop="expertType" class="bitianicon">
              <el-table
                :data="expertTypeList"
                :show-header="false"
                border
                style="width: 100%" header-cell-class-name="tableheader">
                <el-table-column
                  prop="professional"
                  label="专业">
                  <template slot-scope="scope">
                    <el-cascader class=""
                                 expand-trigger="hover"
                                 :disabled="true"
                                 :options="expertTypeOptions"
                                 v-model="scope.row.selectexpertTypeOptions">
                    </el-cascader>
                  </template>
                </el-table-column>
              </el-table>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="联系方式："  prop="mobilePhone">
              <el-input v-model="updateForm.mobilePhone"></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="电子邮箱："  prop="email">
              <el-input v-model="updateForm.email"></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="24">
            <el-form-item label="标段信息：" class="bitianicon">
              <el-table
                ref="multipleTable"
                :data="bidSectionList"
                border
                style="width: 100%" header-cell-class-name="tableheader"
                @selection-change="handleSelectionChange">
                <el-table-column
                  type="selection"
                  width="50">
                </el-table-column>
                <el-table-column
                  prop="bidSectionCode"
                  label="标段编号"
                  show-overflow-tooltip>
                </el-table-column>
                <el-table-column
                  prop="bidSectionName"
                  label="标段名称"
                  show-overflow-tooltip>
                </el-table-column>
              </el-table>
            </el-form-item>
          </el-col>
        </el-row>
        <el-form-item class="submit-radio">
          <el-button type="primary" @click="submit('updateForm', 0)" :loading="isSaving">保存</el-button>
          <el-button type="primary" class="submitBtn" @click="submit('updateForm', 1)" :loading="isSubmiting">提交</el-button>
          <el-button class="cancal" @click="close">取消</el-button>
        </el-form-item>
      </el-form>
    </div>
    <experts-dialog :sectionSystemCode="sectionSystemCode" :showVisible="showExpertsVisible" :excludeCodes="excludeCodes"
                    @selected="selectedExperts" @showDialog="showExpertsDialog"></experts-dialog>
    <submitApproveDialog :flowStatus="flowStatus" :showVisible="approveDialogVisable" @confirmSubmit="confirmSubmit" @handleCancel="cancelApprove"></submitApproveDialog>
  </div>
</template>
<script>
import * as expertClassify from '@/assets/js/expertClassify'
import {bidSection, expert} from '@/api/project'
import {validIdCard, validPhoneUser, validEmail} from '@/assets/js/validate'
import expertsDialog from '@/pages/project/projectProcess/common/experts_dialog.vue'
import submitApproveDialog from '@/pages/project/commonCompents/submitApproveDialog'
export default {
  components: {
    expertsDialog,
    submitApproveDialog
  },
  data () {
    return {
      flowStatus: 8,
      expertTypeOptions: expertClassify.expertClassify,
      expertTypeList: [],
      isSaving: false,
      isSubmiting: false,
      updateForm: {
        expertName: '',
        idCard: '',
        mobilePhone: '',
        email: ''
      },
      rules: {
        expertName: {required: true, message: '请填写专家姓名', trigger: 'blur'},
        idCard: {validator: validIdCard, trigger: 'blur'},
        mobilePhone: {validator: validPhoneUser, trigger: 'blur'},
        email: {validator: validEmail, trigger: 'blur'}
      },
      bidSectionList: [],
      bidSection: {},
      showExpertsVisible: false,
      sectionSystemCode: this.$route.query.sectionSystemCode,
      excludeCodes: this.$route.query.excludeCodes,
      approveDialogVisable: false
    }
  },
  methods: {
    // 专业分类
    handleSelectionChange (val) {
      this.updateForm.bidSectionList = val
    },
    /**
     * 保存专业信息
     */
    saveClassify () {
      this.updateForm.expertClassifyList = this.expertTypeList.map(item => { return item })
      if (this.expertTypeList.length) {
        for (let i = 0; i < this.expertTypeList.length; i++) {
          if (this.expertTypeList[i].selectexpertTypeOptions) {
            this.updateForm.expertClassifyList[i].firstClassify = this.expertTypeList[i].selectexpertTypeOptions[0]
            this.updateForm.expertClassifyList[i].secondClassify = this.expertTypeList[i].selectexpertTypeOptions[1]
            this.updateForm.expertClassifyList[i].thirdClassify = this.expertTypeList[i].selectexpertTypeOptions[2]
            this.updateForm.expertClassifyList[i].fourClassify = this.expertTypeList[i].selectexpertTypeOptions[3]
          }
        }
      }
    },
    /** 校验是否存在重复的专业 */
    checkClassify () {
      // 将专业放入classifyData数组中，每次校验最新录入的一个专业是否与以上录入的重复
      // 若重复，则不可新增专业，且提示“存在重复的专业,请移除重复专业!”
      this.classifyData = []
      if (this.expertTypeList.length > 0) {
        for (let i = 0; i < this.expertTypeList.length; i++) {
          if (this.expertTypeList[i].selectexpertTypeOptions) {
            let classify = {
              selectexpertTypeOptions: this.expertTypeList[i].selectexpertTypeOptions
            }
            this.classifyData.push(classify)
          }
        }
      }
      if (this.classifyData.length > 0) {
        let length = this.classifyData.length
        for (let i = 0; i < length - 1; i++) {
          if (this.classifyData[i].selectexpertTypeOptions[0] === this.classifyData[length - 1].selectexpertTypeOptions[0] &&
            this.classifyData[i].selectexpertTypeOptions[1] === this.classifyData[length - 1].selectexpertTypeOptions[1] &&
            this.classifyData[i].selectexpertTypeOptions[2] === this.classifyData[length - 1].selectexpertTypeOptions[2] &&
            this.classifyData[i].selectexpertTypeOptions[3] === this.classifyData[length - 1].selectexpertTypeOptions[3]) {
            this.$message({
              message: '存在重复的专业,请移除重复专业!',
              type: 'warning'
            })
            return false
          }
        }
      }
      return true
    },
    // 提交/保存
    submit (form, status) {
      if (!this.updateForm.bidSectionList || this.updateForm.bidSectionList.length < 1) {
        this.$message({
          message: '请选择标段！',
          type: 'warning'
        })
        return
      }
      if (this.checkClassify()) {
        this.saveClassify()
        this.$refs[form].validate((vaild) => {
          if (vaild) {
            if (Object.is(status, 0)) {
              this.approveDialogVisable = false
              this.submitData(status)
            } else {
              this.approveDialogVisable = true
            }
          } else {
            return false
          }
        })
      }
    },
    submitData (status) {
      let msg = Object.is(status, 1) ? '提交后数据将锁定，不允许修改，确认要提交吗?' : '确定要保存吗?'
      this.$confirm(msg, '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
        beforeClose: (action, instance, done) => {
          done()
        }
      }).then(() => {
        if (Object.is(status, 0)) {
          this.isSaving = true
        } else if (Object.is(status, 1)) {
          this.isSubmiting = true
          this.updateForm.auditStatus = 4
          this.updateForm.submitTime = new Date().getTime()
        }
        expert.update(this.updateForm).then((res) => {
          this.isSaving = false
          this.isSubmiting = false
          if (res.data.resCode === '0000') {
            this.close()
          }
        })
      }).catch(() => {
        this.isSaving = false
        this.isSubmiting = false
        return false
      })
    },
    // 确认提交
    confirmSubmit (record) {
      this.updateForm.approvalFlowExecutorList = []
      this.updateForm.manualAdditionList = []
      for (let i = 0; i < record.approveList.length; i++) {
        let obj = {
          usersId: record.approveList[i].objectId,
          flowLevel: i + 1
        }
        this.updateForm.approvalFlowExecutorList.push(obj)
      }
      if (record.noticeList && record.noticeList.length > 0) {
        this.updateForm.manualAdditionList = record.noticeList
      }
      this.submitData(1)
    },
    cancelApprove () {
      this.approveDialogVisable = false
    },
    // 取消
    close () {
      this.$store.commit('delete_tabs', this.$route.fullPath)
      this.$router.go(-1)
    },
    getExpert () {
      expert.getById(this.$route.query.objectId).then(res => {
        this.updateForm = res.data.expert
        this.expertTypeList = this.editProTabShow(this.updateForm)
        this.updateForm.oldSectionList = this.updateForm.bidSectionList
        this.updateForm.bidSectionList.map(section => {
          this.bidSectionList.map(item => {
            if (section.code === item.code) {
              this.$refs.multipleTable.toggleRowSelection(item)
            }
          })
        })
      })
    },
    /** 修改展示专业-表格 */
    editProTabShow (row) {
      let arr = []
      let rowL = row.expertClassifyList
      for (let i = 0; i < rowL.length; i++) {
        arr[i] = {selectexpertTypeOptions: [rowL[i].firstClassify, rowL[i].secondClassify, rowL[i].thirdClassify, rowL[i].fourClassify]}
      }
      return arr
    },
    getBidSections () {
      let query = {
        tenderSystemCode: this.$route.query.tenderSystemCode,
        flowStatus: 11
      }
      bidSection.getAddExpert(query).then(res => {
        let data = res.data.bidSectionList
        if (data) {
          data.map(section => {
            this.bidSectionList.push(section)
          })
        }
        this.getExpert()
      })
    },
    // 查询当前标段信息
    getBidSection () {
      bidSection.getOne(this.$route.query.sectionSystemCode).then(res => {
        this.bidSection = res.data.bidSection
      })
    },
    init () {
      this.getBidSections()
      this.getBidSection()
    },
    // 选择专家
    btnChoose () {
      this.showExpertsVisible = true
    },
    // 选择专家弹窗 打开/关闭
    showExpertsDialog () {
      this.showExpertsVisible = !this.showExpertsVisible
    },
    // 已选择专家信息
    selectedExperts (obj) {
      this.updateForm.expertManagementCode = obj.code
      this.updateForm.expertName = obj.name
      this.updateForm.idCard = obj.idNumber
      this.updateForm.mobilePhone = obj.mobileNum
      this.updateForm.email = obj.email
      this.expertTypeList = []
      let expertTypes = obj.expertCategory.split(';')
      expertTypes.map(expertType => {
        let selectexpertTypeOptions = expertType.split('-')
        this.expertTypeList.push({selectexpertTypeOptions: selectexpertTypeOptions})
      })
    }
  },
  watch: {
    '$route': 'init'
  },
  mounted () {
    this.init()
  }
}
</script>

<style scoped>
  .addbtn{
    border: 1px solid #3f63f6;
    height: 32px;
    padding: 7px 12px;
    margin-bottom: 12px;
  }
  .el-cascader {
    width: 100%;
  }
  .addbtn {
    border: 1px solid #3f63f6;
    height: 32px;
    padding: 7px 12px;
    margin-bottom: 12px;
  }
  .btn_right{
    float: right;
  }
</style>
