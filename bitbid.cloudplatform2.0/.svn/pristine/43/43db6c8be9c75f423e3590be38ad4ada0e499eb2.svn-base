<template>
  <div class="cloudcontent">
    <div class="main">
      <el-form :model="updateForm" :rules="rules" ref="updateForm" :validate-on-rule-change="true">
        <el-form-item label="标题：" prop="title">
          <el-input v-model="updateForm.title"></el-input>
        </el-form-item>
        <el-form-item :label="type === 'notice' ? '通知内容：' : '内容：'" class="bitianicon">
          <editor ref="ueditor" class="ueditor" :editread="editread"></editor>
        </el-form-item>
        <el-form-item label="附件：">
          <upload-file @uploadSuccess="uploadOtherSuccess"
                       @deleteSuccess="deleteSuccess"
                       :fileArrays="updateForm.fileInformations"
                       fileType="9"></upload-file>
        </el-form-item>
        <el-form-item class="submit-radio">
          <el-button type="primary" @click="submit('updateForm', 1)" :loading="isSubmiting">提交</el-button>
          <el-button type="primary" @click="submit('updateForm', 0)" :loading="isSubmiting">保存</el-button>
          <el-button class="cancal" @click="close">取消</el-button>
        </el-form-item>
      </el-form>
    </div>
  </div>
</template>

<script>
import uploadFile from '@/components/upload/publicFileUpload'
import editor from '@/components/ueditor/ueditor.vue'
import {notice} from '@/api/notice/notice'

export default {
  name: 'add',
  components: {
    uploadFile,
    editor
  },
  data () {
    return {
      type: '',
      isSubmiting: false,
      updateForm: {
        fileInformations: [],
        content: ''
      },
      rules: {
        title: [
          { required: true, message: '标题不能为空', trigger: ['blur', 'change'] }
        ],
        content: [
          { required: true, message: '内容不能为空', trigger: ['blur', 'change'] }
        ]
      },
      // 富文本
      editread: false
    }
  },
  methods: {
    // 上传附件
    uploadOtherSuccess (file) {
      this.updateForm.fileInformations.push(file)
    },
    deleteSuccess (fileId) {
      this.updateForm.fileInformations = this.updateForm.fileInformations.filter(item => item.relativePath !== fileId)
    },
    // 提交/保存
    submit (form, status) {
      this.$refs[form].validate((valid) => {
        if (valid) {
          if (!this.$refs.ueditor.getContent()) {
            this.$message.warning('请输入内容！')
            return false
          }
          let message = ''
          if (status === 0) {
            message = '确认要保存吗?'
          } else {
            message = '提交后数据将锁定，不允许修改，确认要提交吗?'
            this.updateForm.submitTime = new Date()
          }
          this.$confirm(message, '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning',
            beforeClose: (action, instance, done) => {
              done()
            }
          }).then(() => {
            if (this.type === 'notice') {
              this.updateForm.type = 1
            } else {
              this.updateForm.type = 2
            }
            this.updateForm.content = this.$refs.ueditor.getContent()
            this.updateForm.status = status
            console.log(this.updateForm)
            notice.saveNotice(this.updateForm).then((res) => {
              if (res.data.resCode === '0000') {
                this.$router.go(-1)
              }
            })
          })
        } else {
          return false
        }
      })
    },
    // 取消
    close () {
      this.$store.commit('delete_tabs', this.$route.fullPath)
      this.$router.go(-1)
    },
    init () {
      this.type = this.$route.meta.type
      if (this.$route.query.objectId) {
        notice.detailNotice(this.$route.query.objectId).then((res) => {
          if (res.data.resCode === '0000') {
            this.updateForm = res.data.notice
            this.updateForm.content = this.$refs.ueditor.setContent(this.updateForm.content)
          }
        })
      }
    }
  },
  watch: {
    '$route': 'init'
  },
  mounted () {
    this.init()
  }
}
</script>

<style scoped>
</style>
