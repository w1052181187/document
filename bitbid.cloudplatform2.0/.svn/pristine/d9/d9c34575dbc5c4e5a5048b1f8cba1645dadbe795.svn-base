<template>
  <div class="cloudcontent"  id="cloud_collaboration">
    <div class="tabList">
      <ul>
        <li :class="active === 1 ? 'active': ''" @click="getList('未读')">未读({{this.unReadCount}})</li>
        <li :class="active === 2 ? 'active': ''" @click="getList('我收到的')">我收到的</li>
        <li :class="active === 3 ? 'active': ''" @click="getList('我发出的')">我发出的</li>
        <li :class="active === 4 ? 'active': ''" @click="getList('草稿')">草稿</li>
      </ul>
    </div>
    <div class="topmain">
      <div class="seacher_box advancedsearch_box">
        <el-form :model="searchForm" ref="searchForm" label-width="85px" :validate-on-rule-change="true">
          <el-row v-if="active !== 4">
            <el-col :span="24">
              <el-form-item label="发送日期：" style="float: left; margin-right: 20px;">
                <span :class="isTimeSelectAll ? 'all selectall': 'all'" @click="conditionCancel('发送日期')">不限</span>
                <el-radio-group v-model="searchForm.sendDateType"  @change="conditionSelect($event, '发送日期')">
                  <el-radio v-for="item in timeOption" :label="item.code" :key="item.code">{{item.name}}</el-radio>
                </el-radio-group>
              </el-form-item>
              <el-date-picker
                v-model="searchForm.customTime"
                v-if="searchForm.sendDateType === 6"
                @change = "filterTime"
                type="daterange"
                range-separator="至"
                start-placeholder="开始日期"
                end-placeholder="结束日期"
                :default-time="['00:00:00', '23:59:59']"
                value-format="yyyy-MM-dd HH:mm:ss">
              </el-date-picker>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="24">
              <el-form-item label="协同类型：">
                <span :class="isTypeSelectAll ? 'all selectall' : 'all'" @click="conditionCancel('协同类型')">不限</span>
                <el-radio-group v-model="searchForm.type" @change="conditionSelect($event, '协同类型')">
                  <el-radio v-for="item in typeList" :label="item.value" :key="item.value">{{item.label}}</el-radio>
                </el-radio-group>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col style="width: 320px; float: left;" v-if="active !== 3 && active !== 4">
              <el-form-item label="发送人：">
                <el-input class="search" v-model="searchForm.userName" placeholder="点击选择发送人">
                  <el-button type="primary" slot="append" @click="showUserDialog">选择</el-button>
                </el-input>
              </el-form-item>
            </el-col>
            <el-col style="width: 320px; float: left;">
              <el-form-item label="标题：">
                <el-input class="search" v-model="searchForm.messageLike" placeholder="请输入标题"></el-input>
              </el-form-item>
            </el-col>
            <el-col style="width: 160px; float: left;">
              <el-button  type="primary" @click="search('searchForm')">查询</el-button>
              <el-button  @click="reset('searchForm')">重置</el-button>
            </el-col>
          </el-row>
        </el-form>
      </div>
    </div>
    <div class="main">
      <!--按钮-->
      <div class="btnbigbox" v-if="$store.getters.permissions.includes('1080602')">
        <el-button type="primary" class="readbutton" v-if="active === 1 || active === 2" @click="toReadBtn">
          <span>≡ 全部标为已读 </span>
        </el-button>
        <el-button type="primary" class="addbutton" @click="addBtn">
          <span> + 新建</span>
        </el-button>
      </div>
      <!--按钮-->
      <el-table
        :data="tableData"
        @cell-click="onclickBtnData"
        border
        style="width: 100%" header-cell-class-name="tableheader">
        <el-table-column
          type="index"
          label="序号"
          width="60"
          :index="indexMethod"
          align="center">
        </el-table-column>
        <el-table-column
          prop="title"
          label="标题"
          class-name="tableTile"
          :formatter="simpleFormatData"
          show-overflow-tooltip>
          <template slot-scope="scope">
            <i v-if="active === 1 || active === 2" :class="scope.row.isRead ? 'read' : 'unread'"></i>
            <em v-if="scope.row.isHighPriority" :class="scope.row.isRead ? 'read' : 'unread'">高优先级</em>
            <span :class="scope.row.isRead ? 'read' : 'unread'" class="pointer">{{scope.row.title}}</span>
          </template>
        </el-table-column>
        <el-table-column
          prop="senderName"
          label="发送人"
          width="120"
          :formatter="simpleFormatData"
          show-overflow-tooltip>
        </el-table-column>
        <el-table-column
          prop="sendDate"
          label="发送日期"
          width="160"
          :formatter="formatDate"
          show-overflow-tooltip>
        </el-table-column>
        <el-table-column
          label="操作" align="center" width="220">
          <template slot-scope="scope">
            <el-button type="text" size="small" @click="handleClickEvent(scope, '查看')">查看</el-button>
            <el-button type="text" size="small" v-if="active === 4 && $store.getters.permissions.includes('1080602')" @click="handleClickEvent(scope, '编辑')">编辑</el-button>
            <el-button type="text" size="small" v-if="active === 4 && $store.getters.permissions.includes('1080602')" @click="handleClickEvent(scope, '删除')">删除</el-button>
           </template>
        </el-table-column>
      </el-table>
      <!--分页-->
      <el-pagination
        background
        layout="prev, pager, next"
        :total="total"
        :page-size='pageSize'
        :current-page.sync="currentPage"
        @current-change="handleCurrentChange"
        @next-click="handleCurrentNext">
      </el-pagination>
      <!--分页-->
    </div>
    <select-user-dialog :showVisible="showUserVisible" @selected="selectedUser" @showDialog="showUserDialog"></select-user-dialog>
  </div>
</template>
<script>
import {dateFormat} from '@/assets/js/common'
import selectUserDialog from '@/pages/system/users/search_user_radio'
import {workCollaboration} from '@/api/office'
export default {
  components: {
    selectUserDialog
  },
  data () {
    return {
      active: this.$route.query.active ? Number(this.$route.query.active) : 1,
      searchForm: {
        sendDateType: '',
        customTime: '',
        type: '',
        userName: ''
      },
      typeList: [],
      // 发送日期
      timeOption: [
        {
          name: '今天',
          code: 7
        },
        {
          name: '本周',
          code: 8
        },
        {
          name: '本月',
          code: 9
        },
        {
          name: '自定义',
          code: 6
        }
      ],
      // 选择发送人
      showUserVisible: false,
      tableData: [],
      // 当前页
      currentPage: 1,
      pageNo: 0,
      total: 0, // 总条数
      pageSize: 10, // 每页展示条数
      unReadCount: 0,
      isTimeSelectAll: true,
      isTypeSelectAll: true
    }
  },
  watch: {
    active (newVal, oldVal) {
      this.getWorkCollaborationList(0, 'init')
    }
  },
  methods: {
    // 顶部tab菜单
    getList (type) {
      switch (type) {
        case '未读':
          this.active = 1
          break
        case '我收到的':
          this.active = 2
          break
        case '我发出的':
          this.active = 3
          break
        case '草稿':
          this.active = 4
          break
        default:
          break
      }
    },
    filterTime (value) {
    },
    // 选择人员弹框打开
    showUserDialog () {
      this.showUserVisible = !this.showUserVisible
    },
    selectedUser (obj) {
      this.searchForm.userName = obj.name
      this.searchForm.senderId = obj.objectId
    },
    // 查询
    search () {
      this.getWorkCollaborationList(0, 'search')
    },
    // 重置
    reset () {
      this.searchForm = {}
      this.isTimeSelectAll = true
      this.isTypeSelectAll = true
      this.getWorkCollaborationList(0, 'reset')
    },
    onclickBtnData (row, column, cell, event) {
      if (column.label === '标题') {
        this.$router.push({path: `/office/collaboration/detail`, query: {objectId: row.objectId, active: this.active}})
      }
    },
    // 高级搜索-搜索条件选择
    conditionSelect (value, label) {
      switch (label) {
        case '发送日期':
          this.searchForm.sendDateType = value
          this.isTimeSelectAll = false
          break
        case '协同类型':
          this.searchForm.type = value
          this.isTypeSelectAll = false
          break
        default:
          break
      }
    },
    // 搜索条件 点击不限
    conditionCancel (label) {
      switch (label) {
        case '发送日期':
          this.searchForm.sendDateType = ''
          this.isTimeSelectAll = true
          break
        case '协同类型':
          this.searchForm.type = ''
          this.isTypeSelectAll = true
          break
        default:
          break
      }
    },
    // 全部标记为已读
    toReadBtn () {
      let data = {
        departmentId: this.$store.getters.authUser.departmentId,
        isRead: 1,
        lastUpdateId: this.$store.getters.authUser.userId,
        lastUpdateDate: new Date().getTime(),
        receiverId: this.$store.getters.authUser.userId
      }
      workCollaboration.updateToRead(data).then(res => {
        this.getWorkCollaborationList(0, 'init')
        this.unReadCount = 0
      })
    },
    // 新增
    addBtn () {
      this.$router.push({path: `/office/collaboration/add`})
    },
    // 表格序号
    indexMethod (index) {
      return index + (this.currentPage - 1) * this.pageSize + 1
    },
    // 表格分页
    handleCurrentChange (nowNum) {
      this.currentPage = nowNum
      this.pageNo = (nowNum - 1) * this.pageSize
      this.getWorkCollaborationList(this.pageNo, 'search')
    },
    handleCurrentNext (nowNum) {
      this.currentPage = nowNum
      this.pageNo = (nowNum - 1) * this.pageSize
      this.getWorkCollaborationList(this.pageNo, 'search')
    },
    // 格式化时间
    formatDate (row, col, cellValue) {
      return cellValue ? dateFormat(cellValue, 'yyyy-MM-dd') : '---'
    },
    // 普通格式化数据，空的时候展示"---"
    simpleFormatData (row, col, cellValue) {
      return cellValue || '---'
    },
    handleClickEvent (scope, type) {
      switch (type) {
        case '查看':
          this.$router.push({path: `/office/collaboration/detail`, query: {objectId: scope.row.objectId, active: this.active}})
          break
        case '编辑':
          this.$router.push({path: `/office/collaboration/update`, query: {objectId: scope.row.objectId, operate: 'edit'}})
          break
        case '删除':
          this.$confirm('确认删除吗?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'error'
          }).then(() => {
            workCollaboration.deleteById(scope.row.objectId).then(() => {
              this.getWorkCollaborationList(0, 'delete')
            })
          }).catch(() => {
            return false
          })
          break
        default:
          break
      }
    },
    getWorkCollaborationList (pageNo, operate) {
      let query = {
        pageNo: pageNo,
        pageSize: this.pageSize,
        enterpriseId: this.$store.getters.authUser.enterpriseId,
        sendDateType: this.searchForm.sendDateType || null,
        type: this.searchForm.type || null,
        senderId: this.searchForm.senderId || null,
        messageLike: this.searchForm.messageLike || null
      }
      if (this.searchForm.customTime) {
        query.sendDateLowerLimit = this.searchForm.customTime[0]
        query.sendDateUpperLimit = this.searchForm.customTime[1]
      }
      if (Object.is(this.active, 1)) {
        // 未读
        query.status = 2
        query.receiverId = this.$store.getters.authUser.userId
        query.isRead = 0
      } else if (Object.is(this.active, 2)) {
        // 我收到的
        query.status = 2
        query.receiverId = this.$store.getters.authUser.userId
      } else if (Object.is(this.active, 3)) {
        // 我发出的
        query.status = 1
        query.senderId = this.$store.getters.authUser.userId
      } else if (Object.is(this.active, 4)) {
        // 草稿
        query.status = 0
        query.creator = this.$store.getters.authUser.userId
      }
      workCollaboration.getList(query).then(res => {
        let data = res.data.workCollaborationList
        if (data) {
          this.tableData = data.list
          this.total = data.total
          if (Object.is(this.active, 1) && Object.is(operate, 'init')) {
            this.unReadCount = this.total
          }
        }
      })
    },
    getCollaborationTypes () {
      workCollaboration.getCollaborationTypes().then(res => {
        this.typeList = res.data.collaborationTypes
      })
    }
  },
  mounted () {
    this.getWorkCollaborationList(this.pageNo, 'init')
    this.getCollaborationTypes()
  }
}
</script>
<style lang="less">
  #cloud_collaboration{
  }
</style>
